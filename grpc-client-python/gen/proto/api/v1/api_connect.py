# -*- coding: utf-8 -*-
# Generated by https://github.com/connectrpc/connect-python.  DO NOT EDIT!
# source: proto/api/v1/api.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connectrpc.client import ConnectClient, ConnectClientSync
from connectrpc.code import Code
from connectrpc.errors import ConnectError
from connectrpc.interceptor import Interceptor, InterceptorSync
from connectrpc.method import IdempotencyLevel, MethodInfo
from connectrpc.request import Headers, RequestContext
from connectrpc.server import ConnectASGIApplication, ConnectWSGIApplication, Endpoint, EndpointSync
import proto.api.v1.api_pb2 as proto_dot_api_dot_v1_dot_api__pb2


class ApiService(Protocol):
    async def post(self, request: proto_dot_api_dot_v1_dot_api__pb2.PostRequest, ctx: RequestContext) -> proto_dot_api_dot_v1_dot_api__pb2.PostResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def get(self, request: proto_dot_api_dot_v1_dot_api__pb2.GetRequest, ctx: RequestContext) -> proto_dot_api_dot_v1_dot_api__pb2.GetResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")

    async def ping_pong(self, request: proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest, ctx: RequestContext) -> proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ApiServiceASGIApplication(ConnectASGIApplication):
    def __init__(self, service: ApiService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/api.v1.ApiService/Post": Endpoint.unary(
                    method=MethodInfo(
                        name="Post",
                        service_name="api.v1.ApiService",
                        input=proto_dot_api_dot_v1_dot_api__pb2.PostRequest,
                        output=proto_dot_api_dot_v1_dot_api__pb2.PostResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.post,
                ),
                "/api.v1.ApiService/Get": Endpoint.unary(
                    method=MethodInfo(
                        name="Get",
                        service_name="api.v1.ApiService",
                        input=proto_dot_api_dot_v1_dot_api__pb2.GetRequest,
                        output=proto_dot_api_dot_v1_dot_api__pb2.GetResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get,
                ),
                "/api.v1.ApiService/PingPong": Endpoint.unary(
                    method=MethodInfo(
                        name="PingPong",
                        service_name="api.v1.ApiService",
                        input=proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest,
                        output=proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.ping_pong,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/api.v1.ApiService"


class ApiServiceClient(ConnectClient):
    async def post(
        self,
        request: proto_dot_api_dot_v1_dot_api__pb2.PostRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_api_dot_v1_dot_api__pb2.PostResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Post",
                service_name="api.v1.ApiService",
                input=proto_dot_api_dot_v1_dot_api__pb2.PostRequest,
                output=proto_dot_api_dot_v1_dot_api__pb2.PostResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def get(
        self,
        request: proto_dot_api_dot_v1_dot_api__pb2.GetRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_api_dot_v1_dot_api__pb2.GetResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Get",
                service_name="api.v1.ApiService",
                input=proto_dot_api_dot_v1_dot_api__pb2.GetRequest,
                output=proto_dot_api_dot_v1_dot_api__pb2.GetResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def ping_pong(
        self,
        request: proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="PingPong",
                service_name="api.v1.ApiService",
                input=proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest,
                output=proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class ApiServiceSync(Protocol):
    def post(self, request: proto_dot_api_dot_v1_dot_api__pb2.PostRequest, ctx: RequestContext) -> proto_dot_api_dot_v1_dot_api__pb2.PostResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def get(self, request: proto_dot_api_dot_v1_dot_api__pb2.GetRequest, ctx: RequestContext) -> proto_dot_api_dot_v1_dot_api__pb2.GetResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")
    def ping_pong(self, request: proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest, ctx: RequestContext) -> proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse:
        raise ConnectError(Code.UNIMPLEMENTED, "Not implemented")


class ApiServiceWSGIApplication(ConnectWSGIApplication):
    def __init__(self, service: ApiServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None) -> None:
        super().__init__(
            endpoints={
                "/api.v1.ApiService/Post": EndpointSync.unary(
                    method=MethodInfo(
                        name="Post",
                        service_name="api.v1.ApiService",
                        input=proto_dot_api_dot_v1_dot_api__pb2.PostRequest,
                        output=proto_dot_api_dot_v1_dot_api__pb2.PostResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.post,
                ),
                "/api.v1.ApiService/Get": EndpointSync.unary(
                    method=MethodInfo(
                        name="Get",
                        service_name="api.v1.ApiService",
                        input=proto_dot_api_dot_v1_dot_api__pb2.GetRequest,
                        output=proto_dot_api_dot_v1_dot_api__pb2.GetResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.get,
                ),
                "/api.v1.ApiService/PingPong": EndpointSync.unary(
                    method=MethodInfo(
                        name="PingPong",
                        service_name="api.v1.ApiService",
                        input=proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest,
                        output=proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.ping_pong,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self) -> str:
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/api.v1.ApiService"


class ApiServiceClientSync(ConnectClientSync):
    def post(
        self,
        request: proto_dot_api_dot_v1_dot_api__pb2.PostRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_api_dot_v1_dot_api__pb2.PostResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Post",
                service_name="api.v1.ApiService",
                input=proto_dot_api_dot_v1_dot_api__pb2.PostRequest,
                output=proto_dot_api_dot_v1_dot_api__pb2.PostResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def get(
        self,
        request: proto_dot_api_dot_v1_dot_api__pb2.GetRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_api_dot_v1_dot_api__pb2.GetResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Get",
                service_name="api.v1.ApiService",
                input=proto_dot_api_dot_v1_dot_api__pb2.GetRequest,
                output=proto_dot_api_dot_v1_dot_api__pb2.GetResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def ping_pong(
        self,
        request: proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="PingPong",
                service_name="api.v1.ApiService",
                input=proto_dot_api_dot_v1_dot_api__pb2.PingPongRequest,
                output=proto_dot_api_dot_v1_dot_api__pb2.PingPongResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
